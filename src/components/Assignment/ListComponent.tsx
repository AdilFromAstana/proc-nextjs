"use client";

import { useState, forwardRef, useImperativeHandle, useRef } from "react";
import { useRouter } from "next/navigation";
import { useTranslation } from "next-i18next";

// shadcn-ui –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";

import EntityListComponent, { EntityListRef } from "@/components/ui/EntityList";
import AssignmentRadialChartComponent from "@/components/Assignment/UI/RadialChartComponent";
import AssignmentStatusComponent from "@/components/Assignment/UI/StatusComponent";

import { useBasket } from "@/hooks/useBasket";
import { Assignment } from "@/api/assignmentApi";

// –¢–∏–ø—ã –ø—Ä–æ–ø—Å–æ–≤
interface AssignmentListComponentProps {
  assignments: Assignment[];
  route?: string;
  page?: number;
  pagination?: boolean;
  bordered?: boolean;
  loadingPlaceholderCount?: number;
  visibleStatus?: boolean;
  onPaged?: (page: number) => void;
  onSelected?: (assignment: Assignment) => void;
  loading?: boolean;
}

export interface AssignmentListRef {
  showLoader: () => void;
  hideLoader: () => void;
}

// ‚úÖ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–≤–º–µ—Å—Ç–æ –º–µ—Ç–æ–¥–æ–≤ –∫–ª–∞—Å—Å–∞)
const getTypeName = (type: string): string => {
  const map: Record<string, string> = {
    quiz: "–¢–µ—Å—Ç",
    lesson: "–£—Ä–æ–∫",
    // –î–æ–±–∞–≤—å –ø–µ—Ä–µ–≤–æ–¥—ã –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
  };
  return map[type] || type;
};

const AssignmentListComponent = forwardRef<
  AssignmentListRef,
  AssignmentListComponentProps
>(
  (
    {
      assignments,
      route = "teacher-assignment-view",
      page = 1,
      pagination = false,
      bordered = false,
      loadingPlaceholderCount = 5,
      visibleStatus = true,
      onPaged,
      onSelected,
      loading = false,
    },
    ref
  ) => {
    const { t } = useTranslation();
    const router = useRouter();

    // Ref –¥–ª—è EntityListComponent
    const entityListRef = useRef<EntityListRef>(null);

    // –•—É–∫–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    const [modalOpen, setModalOpen] = useState(false);
    const [selectedAssignment, setSelectedAssignment] =
      useState<Assignment | null>(null);

    // –•—É–∫ –∫–æ—Ä–∑–∏–Ω—ã
    const { addProduct, removeProduct, setShowBasket } = useBasket();

    // ‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –º–µ—Ç–æ–¥–æ–≤ —á–µ—Ä–µ–∑ ref
    useImperativeHandle(ref, () => ({
      showLoader: () => entityListRef.current?.showLoader(),
      hideLoader: () => entityListRef.current?.hideLoader(),
    }));

    // ‚úÖ –õ–æ–≥–∏–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∑–∞–¥–∞–Ω–∏—é
    const handleAssignmentClick = (assignment: Assignment) => {
      // –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø –ø–ª–∞—Ç–Ω—ã–π –∏ –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –∫—É–ø–ª–µ–Ω (–≤ –∫–æ—Ä–∑–∏–Ω–µ –∏–ª–∏ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω)
      // ‚ö†Ô∏è –í –æ—Ä–∏–≥–∏–Ω–∞–ª–µ: assignment.product.isAcquired() ‚Üí –º—ã –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ —Ö—É–∫ useBasket
      // –ü–æ–∫–∞ —á—Ç–æ –¥–ª—è –¥–µ–º–æ ‚Äî —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –µ—Å–ª–∏ product_id —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ access_type === 'paid', —Ç–æ –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª–∫—É
      if (assignment.access_type === "paid" && assignment.product_id) {
        setSelectedAssignment(assignment);
        setModalOpen(true);
        return;
      }

      // –û–±—ã—á–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
      if (route) {
        router.push(`/assignments/${assignment.id}`);
      } else {
        onSelected?.(assignment);
      }
    };

    // ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏
    const handleConfirmPrepaid = async () => {
      if (!selectedAssignment || !selectedAssignment.product_id) {
        setModalOpen(false);
        return;
      }

      try {
        await removeProduct(selectedAssignment.product_id); // –£–¥–∞–ª—è–µ–º, –µ—Å–ª–∏ –±—ã–ª
        await addProduct(selectedAssignment.product_id); // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É
        setShowBasket(true); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
      } catch (error) {
        console.error("Error adding to basket:", error);
      } finally {
        setModalOpen(false);
      }
    };

    // ‚úÖ –†–µ–Ω–¥–µ—Ä –∏–∫–æ–Ω–∫–∏ (–∑–∞–º–µ–Ω–∞ slot="entity-item-view")
    const renderAssignmentIcon = (entity: Assignment) => {
      if (entity.access_type === "paid" && entity.product_id) {
        return (
          <div className="w-10 h-10 rounded-full bg-gray-100 flex items-center justify-center">
            <span className="text-gray-400 text-lg">üîí</span>
          </div>
        );
      }

      return (
        <AssignmentRadialChartComponent
          width={40}
          progress={entity.progress?.total || 0} // ‚ö†Ô∏è progress –Ω–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ —Ç–≤–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö ‚Äî –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å API
        />
      );
    };

    // ‚úÖ –†–µ–Ω–¥–µ—Ä –¥–∞–Ω–Ω—ã—Ö (–∑–∞–º–µ–Ω–∞ slot="entity-item-data")
    const renderAssignmentData = (entity: Assignment) => {
      if (entity.access_type === "paid" && entity.product_id) {
        return (
          <>
            <div className="flex items-center">
              <span className="text-black text-base font-semibold truncate">
                {entity.name}
              </span>
              <span
                className={`ml-2.5 px-1.5 py-1 text-xs font-medium rounded text-gray-700 bg-gray-100`}
              >
                {getTypeName(entity.type)}
              </span>
            </div>
            <div className="mt-1 text-gray-500 text-sm font-normal">
              {t("label-assignment-access-type-prepaid")}
            </div>
          </>
        );
      }

      return (
        <>
          <div className="flex items-center">
            <span className="text-black text-base font-semibold truncate">
              {entity.name}
            </span>
            <span
              className={`ml-2.5 px-1.5 py-1 text-xs font-medium rounded text-gray-700 bg-gray-100`}
            >
              {getTypeName(entity.type)}
            </span>
          </div>

          {entity.class_id && (
            <div className="mt-1 text-gray-500 text-sm font-normal">
              {/* ‚ö†Ô∏è –í –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∏–º–µ–Ω–∏ –∫–ª–∞—Å—Å–∞ ‚Äî –ø–æ–∫–∞ –≤—ã–≤–æ–¥–∏–º ID –∏–ª–∏ –∑–∞–≥–ª—É—à–∫—É */}
              –ö–ª–∞—Å—Å ID: {entity.class_id}
            </div>
          )}

          {visibleStatus && (
            <div className="absolute top-1/2 right-5 transform -translate-y-1/2">
              <AssignmentStatusComponent status={entity.status} size="small" />
            </div>
          )}
        </>
      );
    };

    // ‚úÖ –°–∫–µ–ª–µ—Ç–æ–Ω
    if (loading) {
      return (
        <div className="space-y-4 p-4">
          {Array.from({ length: loadingPlaceholderCount }).map((_, i) => (
            <div key={i} className="animate-pulse flex space-x-4">
              <div className="rounded-full bg-gray-300 h-12 w-12"></div>
              <div className="flex-1 space-y-4 py-1">
                <div className="h-4 bg-gray-300 rounded w-3/4"></div>
                <div className="space-y-2">
                  <div className="h-4 bg-gray-300 rounded"></div>
                  <div className="h-4 bg-gray-300 rounded w-5/6"></div>
                </div>
              </div>
            </div>
          ))}
        </div>
      );
    }

    // ‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–Ω–¥–µ—Ä
    return (
      <div className="assignment-list-component">
        <EntityListComponent
          ref={entityListRef}
          entities={assignments}
          pagination={pagination}
          bordered={bordered}
          loadingPlaceholderCount={loadingPlaceholderCount}
          page={page}
          entityProps={{ hideLabels: true }}
          onEntityClicked={handleAssignmentClick}
          onPaged={onPaged}
          renderIcon={renderAssignmentIcon}
          renderData={renderAssignmentData}
        />

        {/* ‚úÖ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ */}
        <Dialog open={modalOpen} onOpenChange={setModalOpen}>
          <DialogContent>
            <DialogHeader>
              <DialogTitle>
                {t("label-assignment-prepaid-confirm-title")}
              </DialogTitle>
              <DialogDescription>
                {t("label-assignment-prepaid-confirm-description")}
              </DialogDescription>
            </DialogHeader>
            <div className="flex justify-end gap-2 mt-4">
              <Button variant="outline" onClick={() => setModalOpen(false)}>
                {t("btn-cancel")}
              </Button>
              <Button onClick={handleConfirmPrepaid}>{t("btn-confirm")}</Button>
            </div>
          </DialogContent>
        </Dialog>
      </div>
    );
  }
);

AssignmentListComponent.displayName = "AssignmentListComponent";

export default AssignmentListComponent;
