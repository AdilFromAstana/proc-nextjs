"use client";
import { RefObject, useState } from "react";
import { Question } from "./WordToCreateTest";
import { ProcessTextWithRichContent } from "../parseDocxLogic/processRichText";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import {
  faPen,      // —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
  faTrash,    // —É–¥–∞–ª–∏—Ç—å
  faSave,     // —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
  faTimes,    // –æ—Ç–º–µ–Ω–∞
} from "@fortawesome/free-solid-svg-icons";

interface QuestionRendererProps {
  questionRefs: RefObject<Record<number, HTMLDivElement>>;
  highlightedId: number | null;
  question: Question;
  onEdit: (q: Question) => void;
  onDelete: (id: number) => void;
}

export default function QuestionRenderer({
  questionRefs,
  highlightedId,
  question,
  onEdit,
  onDelete,
}: QuestionRendererProps) {
  const [options, setOptions] = useState(() =>
    question.options.map((opt) => ({
      ...opt,
      isEditing: false, // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–æ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      draftText: opt.text, // –ß–µ—Ä–Ω–æ–≤–∏–∫ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≤–≤–æ–¥–∞ (–∏—Å–∫–ª—é—á–∞–µ—Ç –ª–∏—à–Ω–∏–µ —Ä–µ—Ä–µ–Ω–¥–µ—Ä—ã)
    }))
  );

  const [isEditing, setIsEditing] = useState(false);

  const saveQuestion = () => {
    const updatedQuestion: Question = {
      ...question,
      options: options.map((o) => ({
        id: o.id,
        text: o.draftText,
        isCorrect: o.isCorrect,
      })),
    };
    onEdit(updatedQuestion);
    setIsEditing(false);
  };

  const cancelEditing = () => {
    setOptions(
      question.options.map((opt) => ({
        ...opt,
        isEditing: false,
        draftText: opt.text,
      }))
    );
    setIsEditing(false);
  };

  const toggleCorrect = (id: string) => {
    if (!isEditing) return;
    setOptions((prev) =>
      prev.map((opt) =>
        opt.id === id ? { ...opt, isCorrect: !opt.isCorrect } : opt
      )
    );
  };

  const removeOption = (id: string) => {
    if (!isEditing) return;
    setOptions((prev) => prev.filter((opt) => opt.id !== id));
  };

  const addOption = () => {
    const newId = `opt-${options.length + 1}-${Date.now()}`;
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    setOptions((prev) => [
      // –°–Ω–∞—á–∞–ª–∞ —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä—ã –∑–∞–∫—Ä—ã—Ç—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã
      ...prev.map((opt) =>
        opt.isEditing ? { ...opt, isEditing: false, text: opt.draftText } : opt
      ),
      {
        id: newId,
        text: "",
        isCorrect: false,
        isEditing: true,
        draftText: "",
      },
    ]);
  };

  return (
    <div
      ref={(el) => {
        questionRefs.current[question.id] = el;
      }}
      className={`p-4 border rounded-lg bg-gray-50 shadow-sm transition-colors ${
        highlightedId === question.id ? "flash-3" : ""
      }`}
    >
      {/* üîΩ –°–∫—Ä—ã–≤–∞–µ–º MathML, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–ª–æ—Å—å (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏) */}
      <style jsx global>{`
        .katex .katex-html {
          display: none !important;
        }
      `}</style>

      <div className="mb-6 rounded-xl border border-slate-200 bg-white shadow-xl">
        {/* –ë–ª–æ–∫ –í–æ–ø—Ä–æ—Å–∞ */}
        <div className="p-5 border-b border-slate-100">
          <div className="text-xl font-extrabold text-slate-800 flex items-start">
            <span className="font-bold mr-3 text-blue-600">{question.id}.</span>
            {/* –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ processTextWithRichContent –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSX */}
            <div className="flex-1 relative text-lg">
              {/* @ts-ignore */}
              <ProcessTextWithRichContent
                text={question.question}
                editable={isEditing}
                key={question.id}
              />
            </div>
          </div>
        </div>

        {/* –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ */}
        <div className="divide-y divide-slate-100 flex flex-col p-2">
          {options.map((o) => {
            const isCorrect = o.isCorrect;
            const itemClass = isCorrect
              ? "bg-green-50 border-green-300 shadow-sm"
              : "bg-white border-slate-200 hover:bg-slate-50";

            return (
              <div
                key={o.id}
                className={`flex items-center gap-3 p-3 my-1 border rounded-lg transition-all duration-200 ${itemClass}`}
              >
                {/* 1. Checkbox/Correct Marker */}
                <button
                  onClick={() => toggleCorrect(o.id)}
                  className={`w-8 h-8 flex items-center justify-center rounded-full transition-all duration-200 shrink-0 ${
                    isCorrect
                      ? "bg-green-600 text-white shadow-lg"
                      : "bg-slate-200 text-slate-700 hover:bg-slate-300"
                  }`}
                  title={
                    isCorrect ? "–û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤–µ—Ä–Ω—ã–π" : "–ü–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤–µ—Ä–Ω—ã–π"
                  }
                >
                  {/* –ò–∫–æ–Ω–∫–∞ –≥–∞–ª–æ—á–∫–∏ */}
                  <svg
                    className="w-5 h-5"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    strokeWidth="3"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                  >
                    <path d="M20 6L9 17L4 12" />
                  </svg>
                </button>

                {/* 2. Option Content/Input */}
                <div className="flex-grow mr-4 min-w-0">
                  <div
                    className={`text-base break-words ${
                      isCorrect ? "font-semibold" : "text-slate-800"
                    }`}
                  >
                    {/* @ts-ignore */}
                    <ProcessTextWithRichContent
                      text={o.text}
                      editable={isEditing}
                      key={o.id}
                    />
                  </div>
                </div>

                {/* 3. Actions */}
                <div className="flex space-x-1 shrink-0">
                  {isEditing && (
                    <button
                      onClick={() => removeOption(o.id)}
                      className="p-2 text-slate-600 hover:text-red-600 hover:bg-red-50 rounded-lg transition"
                      title="–£–¥–∞–ª–∏—Ç—å"
                    >
                      {/* –ò–∫–æ–Ω–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è */}
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        className="h-5 w-5"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke="currentColor"
                        strokeWidth="2"
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          d="M6 18L18 6M6 6l12 12"
                        />
                      </svg>
                    </button>
                  )}
                </div>
              </div>
            );
          })}
        </div>

        {isEditing && (
          <div className="p-4 border-t bg-slate-50 text-center rounded-b-xl">
            <button
              onClick={addOption}
              className="px-4 py-2 text-sm rounded-lg bg-blue-600 text-white font-medium hover:bg-blue-700 transition shadow-md flex items-center mx-auto cursor-pointer"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                className="h-5 w-5 mr-1"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
                strokeWidth="2"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  d="M12 4v16m8-8H4"
                />
              </svg>
              –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
            </button>
          </div>
        )}
      </div>
      <div className="mt-4 flex justify-end gap-3">
        {isEditing ? (
          <>
            {/* –°–æ—Ö—Ä–∞–Ω–∏—Ç—å */}
            <button
              onClick={saveQuestion}
              className="inline-flex items-center gap-2 px-4 py-2 rounded-lg text-white bg-blue-600 hover:bg-blue-700 focus:ring-2 focus:ring-blue-400 transition"
            >
              <FontAwesomeIcon icon={faSave} />
              <span>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</span>
            </button>

            {/* –û—Ç–º–µ–Ω–∞ */}
            <button
              onClick={cancelEditing}
              className="inline-flex items-center gap-2 px-4 py-2 rounded-lg text-slate-700 bg-slate-100 hover:bg-slate-200 focus:ring-2 focus:ring-slate-300 transition"
            >
              <FontAwesomeIcon icon={faTimes} />
              <span>–û—Ç–º–µ–Ω–∞</span>
            </button>
          </>
        ) : (
          <>
            {/* –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å */}
            <button
              onClick={() => setIsEditing(true)}
              className="inline-flex items-center gap-2 px-4 py-2 rounded-lg text-blue-600 bg-blue-50 hover:bg-blue-100 focus:ring-2 focus:ring-blue-300 transition"
            >
              <FontAwesomeIcon icon={faPen} />
              <span>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</span>
            </button>

            {/* –£–¥–∞–ª–∏—Ç—å */}
            <button
              onClick={() => {
                if (confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å?")) {
                  onDelete(question.id);
                }
              }}
              className="inline-flex items-center gap-2 px-4 py-2 rounded-lg text-red-600 bg-red-50 hover:bg-red-100 focus:ring-2 focus:ring-red-300 transition"
            >
              <FontAwesomeIcon icon={faTrash} />
              <span>–£–¥–∞–ª–∏—Ç—å</span>
            </button>
          </>
        )}
      </div>
    </div>
  );
}
